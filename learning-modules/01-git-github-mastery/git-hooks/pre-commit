#!/bin/bash
# 🏴‍☠️ ONE PIECE PROJECT - PRE-COMMIT HOOK
# This hook runs before every commit to ensure code quality

echo "🔍 Running pre-commit checks for One Piece project..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${GREEN}✅ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

print_error() {
    echo -e "${RED}❌ $1${NC}"
}

# Check if we're in the right directory
if [ ! -f "requirements.txt" ]; then
    print_error "Not in One Piece project root directory"
    exit 1
fi

# 1. CHECK FOR LARGE FILES
echo "🔍 Checking for large files..."
large_files=$(find . -type f -size +10M -not -path "./.git/*" -not -path "./node_modules/*")
if [ ! -z "$large_files" ]; then
    print_error "Large files detected (>10MB):"
    echo "$large_files"
    print_warning "Consider using Git LFS for large files"
    exit 1
fi
print_status "No large files detected"

# 2. CHECK FOR SECRETS/SENSITIVE DATA
echo "🔍 Scanning for potential secrets..."
secrets_patterns=(
    "password\s*=\s*['\"][^'\"]*['\"]"
    "api_key\s*=\s*['\"][^'\"]*['\"]"
    "secret\s*=\s*['\"][^'\"]*['\"]"
    "token\s*=\s*['\"][^'\"]*['\"]"
    "mysql://.*:.*@"
    "postgresql://.*:.*@"
)

for pattern in "${secrets_patterns[@]}"; do
    if git diff --cached --name-only | xargs grep -l -E "$pattern" 2>/dev/null; then
        print_error "Potential secret detected in staged files!"
        print_warning "Pattern: $pattern"
        print_warning "Please remove secrets and use environment variables"
        exit 1
    fi
done
print_status "No secrets detected"

# 3. CHECK PYTHON CODE FORMATTING (if Python files are staged)
python_files=$(git diff --cached --name-only --diff-filter=ACM | grep '\.py$')
if [ ! -z "$python_files" ]; then
    echo "🐍 Checking Python code formatting..."
    
    # Check if black is installed
    if ! command -v black &> /dev/null; then
        print_warning "Black formatter not installed. Installing..."
        pip install black
    fi
    
    # Run black check
    if ! black --check $python_files; then
        print_error "Python code formatting issues detected"
        print_warning "Run 'black .' to fix formatting"
        exit 1
    fi
    print_status "Python code formatting is correct"
    
    # Check if flake8 is installed and run linting
    if command -v flake8 &> /dev/null; then
        echo "🔍 Running Python linting..."
        if ! flake8 $python_files; then
            print_error "Python linting issues detected"
            exit 1
        fi
        print_status "Python linting passed"
    fi
fi

# 4. CHECK JAVASCRIPT/TYPESCRIPT CODE (if JS/TS files are staged)
js_files=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(js|jsx|ts|tsx)$')
if [ ! -z "$js_files" ]; then
    echo "📜 Checking JavaScript/TypeScript code..."
    
    # Check if prettier is available
    if command -v prettier &> /dev/null; then
        if ! prettier --check $js_files; then
            print_error "JavaScript/TypeScript formatting issues detected"
            print_warning "Run 'prettier --write .' to fix formatting"
            exit 1
        fi
        print_status "JavaScript/TypeScript formatting is correct"
    fi
    
    # Check if eslint is available
    if command -v eslint &> /dev/null; then
        if ! eslint $js_files; then
            print_error "JavaScript/TypeScript linting issues detected"
            exit 1
        fi
        print_status "JavaScript/TypeScript linting passed"
    fi
fi

# 5. CHECK COMMIT MESSAGE FORMAT
commit_msg_file="$1"
if [ -f "$commit_msg_file" ]; then
    commit_msg=$(cat "$commit_msg_file")
    
    # Check for conventional commit format
    if ! echo "$commit_msg" | grep -qE "^(feat|fix|docs|style|refactor|test|chore|perf|ci|build|revert)(\(.+\))?: .+"; then
        print_warning "Commit message doesn't follow conventional commit format"
        print_warning "Expected format: type(scope): description"
        print_warning "Example: feat(trading): add character stock trading API"
    fi
fi

# 6. RUN TESTS (if test files exist)
if [ -f "pytest.ini" ] || [ -f "setup.cfg" ] || [ -d "tests/" ]; then
    echo "🧪 Running tests..."
    if command -v pytest &> /dev/null; then
        if ! pytest --tb=short -q; then
            print_error "Tests failed"
            exit 1
        fi
        print_status "All tests passed"
    fi
fi

# 7. CHECK FOR TODO/FIXME COMMENTS IN PRODUCTION CODE
echo "🔍 Checking for TODO/FIXME comments..."
todo_files=$(git diff --cached --name-only | xargs grep -l -E "(TODO|FIXME|XXX|HACK)" 2>/dev/null | grep -v test)
if [ ! -z "$todo_files" ]; then
    print_warning "TODO/FIXME comments found in:"
    echo "$todo_files"
    print_warning "Consider creating GitHub issues for these items"
fi

print_status "Pre-commit checks completed successfully! 🏴‍☠️"
echo "🚀 Ready to commit your changes!"

exit 0
