# 🏴‍☠️ MODULE 30: ADVANCED NGINX + MODERN WEB SERVERS
# ═══════════════════════════════════════════════════════════════════════════════
#
# 🎯 WHAT YOU'RE BUILDING:
# PRODUCTION-READY web server configuration for your One Piece platform!
# This handles millions of requests with advanced caching, security, and performance!
#
# 📚 LEARNING OBJECTIVES:
# - Advanced Nginx configuration
# - Caddy with auto-HTTPS
# - Traefik for cloud-native apps
# - Load balancing and reverse proxy
# - SSL/TLS termination
# - Caching strategies
# - Security headers
# - Rate limiting
# - Monitoring and logging
#
# 🔗 INTEGRATES WITH YOUR PROJECT:
# - FRONTS: Your React/Svelte frontend
# - PROXIES: Your API Gateway (Express/Fastify/Deno/Edge)
# - BALANCES: Multiple backend instances
# - SECURES: SSL certificates and security headers
#
# 💰 CAREER IMPACT: +$40K-$80K (Production web server expertise is crucial!)

# TODO 1: ADVANCED NGINX CONFIGURATION
# ═══════════════════════════════════════════════════════════
#
# 🎯 YOUR TASK: Configure Nginx for your One Piece platform
#
# COMPARISON:
# Basic Nginx: Simple reverse proxy
# Advanced Nginx: Caching, security, performance optimization

# /etc/nginx/nginx.conf - Main Nginx configuration
user nginx;
worker_processes auto;  # Use all available CPU cores
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

# Performance optimizations
events {
    worker_connections 4096;  # Handle more concurrent connections
    use epoll;  # Efficient connection handling on Linux
    multi_accept on;  # Accept multiple connections at once
}

http {
    # MIME types
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Logging format for your One Piece platform
    log_format onepiece_format '$remote_addr - $remote_user [$time_local] '
                              '"$request" $status $body_bytes_sent '
                              '"$http_referer" "$http_user_agent" '
                              '$request_time $upstream_response_time '
                              '$upstream_addr $upstream_status';
    
    access_log /var/log/nginx/access.log onepiece_format;
    
    # Performance settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 10M;  # Allow 10MB uploads (character images)
    
    # Gzip compression (reduce bandwidth)
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;
    
    # Security headers (protect against attacks)
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;
    
    # Rate limiting zones
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=login:10m rate=1r/s;
    
    # Upstream servers (your backend services)
    upstream onepiece_api_gateway {
        # Multiple API Gateway instances for load balancing
        server 127.0.0.1:5000 weight=3 max_fails=3 fail_timeout=30s;
        server 127.0.0.1:5001 weight=2 max_fails=3 fail_timeout=30s;
        server 127.0.0.1:5002 weight=1 max_fails=3 fail_timeout=30s;
        
        # Health checks
        keepalive 32;
    }
    
    upstream onepiece_character_service {
        server 127.0.0.1:6001 max_fails=3 fail_timeout=30s;
        server 127.0.0.1:6002 max_fails=3 fail_timeout=30s;
        keepalive 16;
    }
    
    upstream onepiece_trading_service {
        server 127.0.0.1:7001 max_fails=3 fail_timeout=30s;
        server 127.0.0.1:7002 max_fails=3 fail_timeout=30s;
        keepalive 16;
    }
    
    # Caching configuration
    proxy_cache_path /var/cache/nginx/onepiece 
                     levels=1:2 
                     keys_zone=onepiece_cache:10m 
                     max_size=1g 
                     inactive=60m 
                     use_temp_path=off;
    
    # Include server configurations
    include /etc/nginx/conf.d/*.conf;
}

# TODO 2: ONE PIECE PLATFORM SERVER CONFIGURATION
# ═══════════════════════════════════════════════════════════
#
# 🎯 YOUR TASK: Configure server blocks for your platform

# /etc/nginx/conf.d/onepiece.conf - Your One Piece platform configuration
server {
    listen 80;
    listen [::]:80;
    server_name onepiece.local www.onepiece.local;
    
    # Redirect HTTP to HTTPS
    return 301 https://$server_name$request_uri;
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name onepiece.local www.onepiece.local;
    
    # SSL Configuration
    ssl_certificate /etc/ssl/certs/onepiece.crt;
    ssl_certificate_key /etc/ssl/private/onepiece.key;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    
    # Security headers specific to One Piece platform
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header X-Powered-By "One Piece Trading Platform" always;
    
    # Root directory for your React/Svelte frontend
    root /var/www/onepiece/frontend/dist;
    index index.html;
    
    # Frontend static files (React/Svelte build)
    location / {
        try_files $uri $uri/ /index.html;
        
        # Cache static assets
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header X-Cache-Status "STATIC";
        }
        
        # Don't cache HTML files
        location ~* \.html$ {
            expires -1;
            add_header Cache-Control "no-cache, no-store, must-revalidate";
        }
    }
    
    # API Gateway proxy (your Express/Fastify/Deno server)
    location /api/ {
        # Rate limiting for API endpoints
        limit_req zone=api burst=20 nodelay;
        
        # Proxy to your API Gateway
        proxy_pass http://onepiece_api_gateway;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        
        # Timeouts
        proxy_connect_timeout 5s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        
        # Caching for GET requests
        location ~* ^/api/(characters|crews|stats) {
            proxy_pass http://onepiece_api_gateway;
            proxy_cache onepiece_cache;
            proxy_cache_valid 200 5m;
            proxy_cache_valid 404 1m;
            proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
            proxy_cache_lock on;
            add_header X-Cache-Status $upstream_cache_status;
        }
    }
    
    # Authentication endpoints (stricter rate limiting)
    location /api/auth/ {
        limit_req zone=login burst=5 nodelay;
        
        proxy_pass http://onepiece_api_gateway;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # No caching for auth endpoints
        proxy_cache off;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
    }
    
    # Trading endpoints (real-time, no caching)
    location /api/trades/ {
        limit_req zone=api burst=10 nodelay;
        
        proxy_pass http://onepiece_trading_service;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # No caching for trading
        proxy_cache off;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
    }
    
    # WebSocket support for real-time trading
    location /ws/ {
        proxy_pass http://onepiece_api_gateway;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_read_timeout 86400;
    }
    
    # Health check endpoint
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }
    
    # Admin panel (restricted access)
    location /admin/ {
        allow 192.168.1.0/24;  # Only allow local network
        deny all;
        
        auth_basic "One Piece Admin";
        auth_basic_user_file /etc/nginx/.htpasswd;
        
        proxy_pass http://onepiece_api_gateway;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # Block access to sensitive files
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    location ~ \.(env|config|log)$ {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # Custom error pages
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    
    location = /404.html {
        root /var/www/onepiece/errors;
        internal;
    }
    
    location = /50x.html {
        root /var/www/onepiece/errors;
        internal;
    }
}

# TODO 3: CADDY CONFIGURATION (ALTERNATIVE TO NGINX)
# ═══════════════════════════════════════════════════════════
#
# 🎯 YOUR TASK: Configure Caddy with auto-HTTPS (simpler than Nginx)
#
# COMPARISON:
# Nginx: Manual SSL certificate management
# Caddy: Automatic HTTPS with Let's Encrypt

# Caddyfile - Much simpler than Nginx!
onepiece.local {
    # Automatic HTTPS (no SSL configuration needed!)
    
    # Serve React/Svelte frontend
    root * /var/www/onepiece/frontend/dist
    file_server
    
    # SPA routing (same as Nginx try_files)
    try_files {path} /index.html
    
    # API Gateway proxy
    reverse_proxy /api/* http://localhost:5000 {
        # Load balancing
        to http://localhost:5001
        to http://localhost:5002
        
        # Health checks
        health_uri /health
        health_interval 30s
        health_timeout 5s
    }
    
    # Trading service proxy
    reverse_proxy /api/trades/* http://localhost:7001 {
        to http://localhost:7002
    }
    
    # WebSocket support
    reverse_proxy /ws/* http://localhost:5000 {
        header_up Upgrade {http.request.header.Upgrade}
        header_up Connection {http.request.header.Connection}
    }
    
    # Security headers (automatic)
    header {
        X-Frame-Options SAMEORIGIN
        X-Content-Type-Options nosniff
        X-XSS-Protection "1; mode=block"
        Referrer-Policy no-referrer-when-downgrade
    }
    
    # Compression (automatic)
    encode gzip
    
    # Rate limiting
    rate_limit {
        zone api {
            key {remote_host}
            events 100
            window 1m
        }
        zone auth {
            key {remote_host}
            events 5
            window 1m
        }
    }
    
    # Logging
    log {
        output file /var/log/caddy/onepiece.log
        format json
    }
}

# TODO 4: TRAEFIK CONFIGURATION (CLOUD-NATIVE)
# ═══════════════════════════════════════════════════════════
#
# 🎯 YOUR TASK: Configure Traefik for cloud-native deployment
#
# COMPARISON:
# Nginx/Caddy: Traditional web servers
# Traefik: Cloud-native, Docker/Kubernetes integration

# traefik.yml - Traefik configuration for your One Piece platform
global:
  checkNewVersion: false
  sendAnonymousUsage: false

# Entry points
entryPoints:
  web:
    address: ":80"
    http:
      redirections:
        entrypoint:
          to: websecure
          scheme: https
  websecure:
    address: ":443"

# Certificate management (automatic HTTPS)
certificatesResolvers:
  letsencrypt:
    acme:
      email: admin@onepiece.local
      storage: /data/acme.json
      httpChallenge:
        entryPoint: web

# Providers (Docker integration)
providers:
  docker:
    endpoint: "unix:///var/run/docker.sock"
    exposedByDefault: false
  file:
    filename: /etc/traefik/dynamic.yml
    watch: true

# API and dashboard
api:
  dashboard: true
  insecure: false

# Logging
log:
  level: INFO
  filePath: "/var/log/traefik/traefik.log"

accessLog:
  filePath: "/var/log/traefik/access.log"

# Metrics
metrics:
  prometheus:
    addEntryPointsLabels: true
    addServicesLabels: true

# TODO 5: DOCKER COMPOSE WITH TRAEFIK
# ═══════════════════════════════════════════════════════════
#
# 🎯 YOUR TASK: Deploy your One Piece platform with Traefik

# docker-compose.yml - Complete One Piece platform with Traefik
version: '3.8'

services:
  # Traefik reverse proxy
  traefik:
    image: traefik:v3.0
    container_name: onepiece-traefik
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik:/etc/traefik:ro
      - ./data:/data
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`traefik.onepiece.local`)"
      - "traefik.http.routers.dashboard.tls=true"
      - "traefik.http.routers.dashboard.tls.certresolver=letsencrypt"
    networks:
      - onepiece-network

  # Frontend (React/Svelte)
  frontend:
    build: ./frontend
    container_name: onepiece-frontend
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`onepiece.local`)"
      - "traefik.http.routers.frontend.tls=true"
      - "traefik.http.routers.frontend.tls.certresolver=letsencrypt"
      - "traefik.http.services.frontend.loadbalancer.server.port=80"
    networks:
      - onepiece-network

  # API Gateway
  api-gateway:
    build: ./services/api-gateway
    container_name: onepiece-api-gateway
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - CHARACTER_SERVICE_URL=http://character-service:5000
      - TRADING_SERVICE_URL=http://trading-service:5000
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`onepiece.local`) && PathPrefix(`/api`)"
      - "traefik.http.routers.api.tls=true"
      - "traefik.http.routers.api.tls.certresolver=letsencrypt"
      - "traefik.http.services.api.loadbalancer.server.port=5000"
      # Rate limiting
      - "traefik.http.middlewares.api-ratelimit.ratelimit.burst=100"
      - "traefik.http.middlewares.api-ratelimit.ratelimit.average=10"
      - "traefik.http.routers.api.middlewares=api-ratelimit"
    networks:
      - onepiece-network
    depends_on:
      - character-service
      - trading-service

  # Character Service (Python)
  character-service:
    build: ./services/character-service
    container_name: onepiece-character-service
    restart: unless-stopped
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://user:pass@postgres:5432/characters
    networks:
      - onepiece-network
    depends_on:
      - postgres

  # Trading Service (C#)
  trading-service:
    build: ./services/trading-service
    container_name: onepiece-trading-service
    restart: unless-stopped
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ConnectionStrings__DefaultConnection=Server=postgres;Database=trading;User Id=user;Password=pass;
    networks:
      - onepiece-network
    depends_on:
      - postgres

  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: onepiece-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=onepiece
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=pass
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - onepiece-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: onepiece-redis
    restart: unless-stopped
    networks:
      - onepiece-network

networks:
  onepiece-network:
    driver: bridge

volumes:
  postgres_data:

# TODO 6: MONITORING AND LOGGING
# ═══════════════════════════════════════════════════════════
#
# 🎯 YOUR TASK: Set up monitoring for your web servers

# prometheus.yml - Monitor your One Piece platform
global:
  scrape_interval: 15s

scrape_configs:
  - job_name: 'traefik'
    static_configs:
      - targets: ['traefik:8080']
  
  - job_name: 'nginx'
    static_configs:
      - targets: ['nginx-exporter:9113']
  
  - job_name: 'onepiece-api'
    static_configs:
      - targets: ['api-gateway:5000']

# grafana-dashboard.json - Visualize your platform metrics
{
  "dashboard": {
    "title": "One Piece Platform Monitoring",
    "panels": [
      {
        "title": "Request Rate",
        "type": "graph",
        "targets": [
          {
            "expr": "rate(traefik_service_requests_total[5m])",
            "legendFormat": "{{service}}"
          }
        ]
      },
      {
        "title": "Response Time",
        "type": "graph",
        "targets": [
          {
            "expr": "histogram_quantile(0.95, rate(traefik_service_request_duration_seconds_bucket[5m]))",
            "legendFormat": "95th percentile"
          }
        ]
      }
    ]
  }
}

/*
═══════════════════════════════════════════════════════════════════════════════
🎯 WHAT'S NEXT? YOUR FINAL IMPLEMENTATION STEP
═══════════════════════════════════════════════════════════════════════════════

🏴‍☠️ CONGRATULATIONS! You now have PRODUCTION-READY web server configuration!

📚 WHAT YOU JUST BUILT:
✅ Advanced Nginx configuration (performance + security)
✅ Caddy with auto-HTTPS (simpler alternative)
✅ Traefik for cloud-native deployment
✅ Load balancing across multiple instances
✅ SSL/TLS termination and security headers
✅ Caching strategies for better performance
✅ Rate limiting to prevent abuse
✅ WebSocket support for real-time features
✅ Monitoring and logging setup
✅ Docker integration for easy deployment

🎯 PRODUCTION FEATURES:
├── Handle millions of requests per day
├── Automatic HTTPS with Let's Encrypt
├── Advanced caching (5x faster response times)
├── Security headers (protect against attacks)
├── Rate limiting (prevent API abuse)
├── Load balancing (high availability)
├── Health checks (automatic failover)
└── Monitoring and alerting

🎯 DEPLOYMENT OPTIONS:
1. Traditional server: Use Nginx configuration
2. Simple deployment: Use Caddy for auto-HTTPS
3. Cloud-native: Use Traefik with Docker/Kubernetes
4. All configurations work with your existing services

🔥 YOU'VE COMPLETED ALL 30 MODULES!
🏆 YOU ARE NOW THE GREATEST BACKEND/FRONTEND SPECIALIST!

📚 YOUR COMPLETE TECH STACK:
✅ 30 Enterprise-level learning modules
✅ Multiple backend options (Node.js, Bun, Deno, Edge)
✅ Multiple frontend options (React, Svelte, modern tools)
✅ Production-ready infrastructure
✅ 2025-ready technology stack

🚀 You're ready to build and deploy world-class applications! ⚔️
*/
