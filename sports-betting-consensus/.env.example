# ============================================================================
# ðŸ“š LEARNING GUIDE: Environment Configuration (.env.example)
# ============================================================================
#
# ðŸŽ¯ PURPOSE:
# This .env.example file serves as a template for environment-specific configuration.
# It demonstrates how to properly structure environment variables for a production-ready
# microservices application. This file should be committed to version control as a
# reference, while the actual .env file (containing real secrets) should never be committed.
#
# ðŸ”§ TECHNOLOGIES USED:
# - Environment Variables: 12-factor app configuration methodology
# - Docker Compose: Environment variable injection into containers
# - Pydantic Settings: Type-safe configuration loading
# - Security Best Practices: Secrets management and separation
#
# ðŸ“– IN-DEPTH EXPLANATION:
#
# **Environment Variable Naming Conventions:**
# - Use UPPERCASE with underscores: DATABASE_URL, OPENAI_API_KEY
# - Group related settings with prefixes: REDIS_HOST, REDIS_PORT, REDIS_PASSWORD
# - Be descriptive but concise: SCRAPING_DELAY_SECONDS vs DELAY
# - Use standard names when possible: PORT, HOST, DEBUG
#
# **Security Levels:**
# 1. **Public**: Can be in version control (APP_NAME, DEBUG in dev)
# 2. **Internal**: Shouldn't be in version control (database URLs with credentials)
# 3. **Secret**: Must never be in version control (API keys, JWT secrets)
#
# **Environment-Specific Values:**
# - Development: Permissive settings, local services, debug enabled
# - Testing: Isolated databases, mock services, deterministic behavior
# - Staging: Production-like settings, real services, monitoring enabled
# - Production: Secure settings, optimized performance, comprehensive logging
#
# **Usage Instructions:**
# 1. Copy this file to .env: `cp .env.example .env`
# 2. Replace placeholder values with real configuration
# 3. Never commit the .env file to version control
# 4. Use different .env files for different environments
#
# ðŸ“š LEARNING MODULE REFERENCES:
# - Module 34 (TypeScript/Node.js): Lines 800-1000 - Environment configuration
# - Module 33 (Java Spring Boot): Lines 300-500 - Application properties
# - Module 36 (AI/LLM Integration): Lines 200-400 - API key management
#
# âœ… IMPLEMENTATION CHECKLIST:
# [ ] Copy this file to .env and customize values
# [ ] Set up different .env files for different environments
# [ ] Configure your IDE to load .env files
# [ ] Add .env to .gitignore to prevent accidental commits
# [ ] Document required vs optional environment variables
# [ ] Set up environment variable validation in your application
# [ ] Create deployment scripts that verify required variables
# [ ] Implement secrets management for production environments
#
# ðŸŽ“ WHAT YOU NEED TO LEARN/UNDERSTAND:
# - The 12-factor app methodology for configuration
# - Environment variable security and best practices
# - Docker environment variable injection
# - Secrets management in different deployment environments
# - Configuration validation and error handling
# - Environment-specific deployment strategies
#
# ðŸš€ REAL-WORLD EXAMPLES:
# - Netflix: Environment-specific configuration for thousands of microservices
# - Spotify: Configuration management across multiple deployment environments
# - Uber: Secrets management and environment variable security
# - GitHub: Environment-based feature flags and configuration
#
# ============================================================================

# ============================================================================
# APPLICATION SETTINGS
# ============================================================================

# Application identification
APP_NAME="Sports Betting Consensus Aggregator"
APP_VERSION="1.0.0"

# Environment type (development, testing, staging, production)
ENVIRONMENT=development

# Debug mode (true for development, false for production)
DEBUG=true

# ============================================================================
# API CONFIGURATION
# ============================================================================

# API version prefix
API_V1_STR="/api/v1"

# Allowed hosts for security (comma-separated)
ALLOWED_HOSTS="localhost,127.0.0.1,0.0.0.0"

# CORS origins for frontend applications (comma-separated)
CORS_ORIGINS="http://localhost:3000,http://localhost:8080"

# ============================================================================
# DATABASE CONFIGURATION
# ============================================================================

# PostgreSQL database connection URL
# Format: postgresql://username:password@host:port/database_name
DATABASE_URL="postgresql://postgres:password@localhost:5432/sports_betting"

# Database connection pool settings
DATABASE_POOL_SIZE=10
DATABASE_MAX_OVERFLOW=20

# ============================================================================
# REDIS CONFIGURATION
# ============================================================================

# Redis connection URL for caching
REDIS_URL="redis://localhost:6379/0"

# Default cache TTL in seconds (3600 = 1 hour)
REDIS_CACHE_TTL=3600

# ============================================================================
# CELERY CONFIGURATION (Background Tasks)
# ============================================================================

# Celery message broker (Redis database 1)
CELERY_BROKER_URL="redis://localhost:6379/1"

# Celery result backend (Redis database 2)
CELERY_RESULT_BACKEND="redis://localhost:6379/2"

# ============================================================================
# AI/LLM API KEYS (REQUIRED FOR AI FEATURES)
# ============================================================================

# OpenAI API key for GPT models
# Get from: https://platform.openai.com/api-keys
OPENAI_API_KEY="sk-your-openai-api-key-here"

# Anthropic API key for Claude models (fallback provider)
# Get from: https://console.anthropic.com/
ANTHROPIC_API_KEY="sk-ant-your-anthropic-api-key-here"

# AI model configuration
AI_MODEL_TEMPERATURE=0.1
AI_MAX_TOKENS=1000

# ============================================================================
# WEB SCRAPING CONFIGURATION
# ============================================================================

# Delay between scraping requests (seconds)
SCRAPING_DELAY_MIN=1.0
SCRAPING_DELAY_MAX=3.0

# HTTP request timeout for scraping (seconds)
SCRAPING_TIMEOUT=30

# Maximum retry attempts for failed requests
SCRAPING_MAX_RETRIES=3

# ============================================================================
# LOGGING CONFIGURATION
# ============================================================================

# Logging level (DEBUG, INFO, WARNING, ERROR, CRITICAL)
LOG_LEVEL=INFO

# Log file path (leave empty for console only)
LOG_FILE="logs/app.log"

# ============================================================================
# SECURITY CONFIGURATION
# ============================================================================

# JWT secret key for token signing (CHANGE IN PRODUCTION!)
# Generate with: openssl rand -hex 32
JWT_SECRET_KEY="your-super-secret-jwt-key-change-in-production-min-32-chars"

# JWT algorithm and expiration
JWT_ALGORITHM="HS256"
JWT_EXPIRE_MINUTES=60

# ============================================================================
# MICROSERVICE URLS
# ============================================================================

# Java Spring Boot API Gateway URL
JAVA_API_URL="http://localhost:8080"

# MCP Server URL for AI agent integration
MCP_SERVER_URL="http://localhost:3001"

# Python FastAPI backend URL (for internal service communication)
PYTHON_API_URL="http://localhost:8000"

# ============================================================================
# DOCKER COMPOSE PORT CONFIGURATION
# ============================================================================

# Frontend port mapping
FRONTEND_PORT=3000

# Backend service ports
JAVA_API_PORT=8080
PYTHON_API_PORT=8000
MCP_SERVER_PORT=3001

# Infrastructure ports
POSTGRES_PORT=5432
REDIS_PORT=6379

# ============================================================================
# DEVELOPMENT-SPECIFIC SETTINGS
# ============================================================================

# Enable hot reloading for development
HOT_RELOAD=true

# Enable API documentation endpoints
ENABLE_DOCS=true

# Enable debug endpoints
ENABLE_DEBUG_ENDPOINTS=true

# ============================================================================
# PRODUCTION-SPECIFIC SETTINGS (Override in production .env)
# ============================================================================

# Production database with connection pooling
# DATABASE_URL="postgresql://prod_user:secure_password@prod-db:5432/sports_betting_prod"

# Production Redis with authentication
# REDIS_URL="redis://:secure_password@prod-redis:6379/0"

# Production security settings
# DEBUG=false
# ENVIRONMENT=production
# JWT_SECRET_KEY="your-production-jwt-secret-key-32-chars-minimum"

# Production logging
# LOG_LEVEL=WARNING
# LOG_FILE="/var/log/sports-betting/app.log"

# ============================================================================
# OPTIONAL: PALANTIR FOUNDRY INTEGRATION
# ============================================================================

# Foundry API configuration (if using Palantir Foundry)
# FOUNDRY_API_URL="https://your-foundry-instance.palantirfoundry.com"
# FOUNDRY_API_TOKEN="your-foundry-api-token"
# FOUNDRY_DATASET_RID="ri.foundry.main.dataset.your-dataset-rid"

# ============================================================================
# OPTIONAL: MONITORING AND OBSERVABILITY
# ============================================================================

# Prometheus metrics endpoint
# ENABLE_METRICS=true
# METRICS_PORT=9090

# Sentry error tracking
# SENTRY_DSN="https://your-sentry-dsn@sentry.io/project-id"

# Application Performance Monitoring
# APM_SERVICE_NAME="sports-betting-consensus"
# APM_ENVIRONMENT="development"

# ============================================================================
# NOTES FOR DIFFERENT ENVIRONMENTS
# ============================================================================

# DEVELOPMENT:
# - Use local services (localhost URLs)
# - Enable debug mode and verbose logging
# - Use simple passwords for local databases
# - Enable development-specific features

# TESTING:
# - Use isolated test databases
# - Mock external services when possible
# - Use deterministic configuration
# - Enable test-specific logging

# STAGING:
# - Use production-like configuration
# - Real external services with test accounts
# - Production-level security
# - Comprehensive monitoring

# PRODUCTION:
# - Secure passwords and API keys
# - Optimized performance settings
# - Comprehensive logging and monitoring
# - Proper secrets management (not in .env files)

# ============================================================================
